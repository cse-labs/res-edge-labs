#!/bin/bash

PARENT_COMMAND=$(ps -o comm= $PPID)

usage() {
  echo

  if [ "${KIC_RES_EDGE_ENTITYNAME}" = "groups" ]; then
    echo "Usage: kic ${KIC_RES_EDGE_ENTITYNAME} ${PARENT_COMMAND} [--search 'search term'] [--order-by id | name | path]"
  else
    echo "Usage: kic ${KIC_RES_EDGE_ENTITYNAME} ${PARENT_COMMAND} [--search 'search term'] [--order-by id | name]"
  fi

  if [ "${KIC_RES_EDGE_ENTITYNAME}" = "clusters" ]; then
    echo "   or: kic ${KIC_RES_EDGE_ENTITYNAME} ${PARENT_COMMAND} --group name"
    echo '   --group:  filter clusters by group'
  fi

  echo "   --search: Search ${KIC_RES_EDGE_ENTITYNAME} by name, metadata or tag (optional)"

  if [ "${KIC_RES_EDGE_ENTITYNAME}" = "groups" ]; then
    echo '   --order-by: id | name | path (default: id)'
  else
    echo '   --order-by: id | name (default: id)'
  fi

  echo

  exit 1
}

list_clusters() {
    CLUSTERS=$(curl --silent --show-error "$URL" | jq -r ' .value[] | .clustersTree' )

    if [ "$CLUSTERS" = "" ]; then
        echo "No clusters found";
        exit 1;
    fi

    CLUSTERS=${CLUSTERS:1}
    CLUSTERS=${CLUSTERS::-1}

    for s in $(echo "{$CLUSTERS}" | sed "s/,/\n/g"); do echo "$s" | sed "s=\/api=${DS_URL}\/api=g" | xargs curl -s | jq -r '([.id, .name]) | @tsv'; done
}

list() {
  if [ -n "${GROUP}" ]; then
    CLUSTERS=$(list_clusters)
    echo "$CLUSTERS" | column -t -s $'\t' -N Id,Name -R Id -o '   '
  elif [ "${KIC_RES_EDGE_ENTITYNAME}" = "groups" ]; then
    response=$(curl --silent --show-error "$URL" | jq -r '(.value[] | [.id, .name, .namePath]) | @tsv')
    echo "$response" | column -t -s $'\t' -N Id,Name,Path -R Id -o '   '
  else
    response=$(curl --silent --show-error "$URL" | jq -r '(.value[] | [.id, .name]) | @tsv')
    echo "$response" | column -t -s $'\t' -N Id,Name -R Id -o '   '
  fi
}

if [ -z "${DS_URL}" ]; then
  echo "Error: DS_URL environment variable is not set"
fi

for arg in "$@"; do
  case $arg in
    --search)
      set -- "${@/$arg/-s}"
      ;;
    --order-by)
      set -- "${@/$arg/-o}"
      ;;
    --group)
      if [ "${KIC_RES_EDGE_ENTITYNAME}" = "clusters" ]; then
        set -- "${@/$arg/-g}"
      else
        echo
        echo "Error: --group is not a valid parameter"
        echo
        usage
      fi
      ;;
  esac
done

while getopts ":s:o:g:" f; do
    case "${f}" in
        s)
            SEARCH=$OPTARG ;;
        o)
            ORDERBY=$OPTARG ;;
        g)
            GROUP=$OPTARG ;;
        *)
            usage ;;
    esac
done
shift $((OPTIND-1))

if [ "$KIC_RES_EDGE_ENTITYNAME" = "groups" ]; then
  if [ "$KIC_RES_EDGE_ENTITYNAME" = "groups" ] && [ -n "$ORDERBY" ] && [ "$ORDERBY" != "id" ] && [ "$ORDERBY" != "name" ] && [ "$ORDERBY" != "path" ]; then
    echo
    echo "Error: Order by supports either 'id' 'name' or 'path'"
    usage
  fi
elif [ -n "$ORDERBY" ] && [ "$ORDERBY" != "id" ] && [ "$ORDERBY" != "name" ]; then
  echo
  echo "Error: Order by supports either 'id' or 'name'"
  usage
fi

URL_PARAMS=()

if [ -n "${SEARCH}" ]; then
  URL_PARAMS+=("search=%22$SEARCH%22")
fi

if [ -n "${ORDERBY}" ]; then
  if [ "$ORDERBY" = "path" ]; then
    URL_PARAMS+=("orderby=namePath")
  else
    URL_PARAMS+=("orderby=${ORDERBY}")
  fi
fi

if [ -n "${GROUP}" ]; then
  if [ -n "${SEARCH}" ] || [ -n "${ORDERBY}" ]; then
      usage;
  fi

  URL_PARAMS+=("filter=name%20eq%20%27${GROUP}%27&select=clustersTree")
  KIC_RES_EDGE_ENTITYNAME="groups"
fi

KIC_BASE_URL="${DS_URL}/api/v1/${KIC_RES_EDGE_ENTITYNAME}/"

# Implode the array with the separator "&" to create a single string
URL_QUERY_STRING=$(printf "&%s" "${URL_PARAMS[@]}")
URL_QUERY_STRING=${URL_QUERY_STRING:1}

URL="${KIC_BASE_URL}?${URL_QUERY_STRING}"

if ! list; then
  echo
  echo "Error: Failed to retrieve data from $URL"
  echo "Please check that the Res-Edge server is up and running with: kic check resedge"
  echo

  exit 1
fi
