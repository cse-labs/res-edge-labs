#!/bin/bash

set -e

SEARCH="";
ORDERBY="";
URL_GROUP="";
URL_FILTER="";
URL_ORDER_BY="";
URL="http://localhost:32080/api/v1/clusters";
GROUP="";
CLUSTERS="";

function print_usage {
  echo "Usage:$0 -g [name] -s [search term] -o [name/id]"
    echo '   -g  filter clusters by group'
    echo '   -s  search for clusters by name, metadata, tag'
    echo '   -o  order by name or id'
}

function get_clusters {
    curl -s "$URL"
}

function list_clusters {

    CLUSTERS=$(get_clusters | jq -r ' .value[] | .clustersTree' )

    if [ "$CLUSTERS" = "" ]; then
        echo "No clusters found";
        exit 1;
    fi

    CLUSTERS=${CLUSTERS:1}
    CLUSTERS=${CLUSTERS::-1}

    for s in $(echo $CLUSTERS | sed "s/,/\n/g"); do echo $s | sed "s/\/api/localhost:32080\/api/g" | xargs curl -s | jq -r .name; done
}

while getopts ":s:o:g:" opts; do
    case "${opts}" in
        s)
            SEARCH=$OPTARG ;;
        o)
            ORDERBY=$OPTARG ;;
        g)
            GROUP=$OPTARG ;;
        *)
            print_usage ; exit 1 ;;
    esac
done
shift $((OPTIND-1))

if [ "${GROUP}" != "" ]; then
    URL_GROUP="?filter=name%20eq%20%27"$GROUP"%27&select=clustersTree"
    URL="http://localhost:32080/api/v1/groups";
elif [ "${SEARCH}" != "" ]; then
    URL_FILTER="?filter=(name%20eq%20%27"$SEARCH"%27%20or%20tags/any(t:t%20eq%20%27"$SEARCH"%27)%20or%20metadata/any(m:m/value%20eq%20%27"$SEARCH"%27))"
fi

if [ "${ORDERBY}" != "" ]; then
    URL_ORDER_BY="?orderby=clustersTree"
fi

URL="${URL}${URL_ORDER_BY}${URL_GROUP}${URL_FILTER}"
CLUSTERS=$(list_clusters)

echo "$CLUSTERS"
